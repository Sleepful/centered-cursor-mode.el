;; centered-cursor-mode.el --- cursor stays vertically centered

;; Copyright (C) 2007  André Riemann

;; Author: André Riemann <andre.riemann@web.de>
;; Maintainer: André Riemann <andre.riemann@web.de>
;; Created: 2007-09-14
;; Keywords: convenience

;; URL: https://github.com/andre-r/centered-cursor-mode.el
;; Compatibility: tested with GNU Emacs 24, 26, 27
;; Version: 0.6
;; Package-Requires: ((emacs "24.4"))
;; Last-Updated: 2019-

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING. If not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
;; MA 02110-1301, USA.

;;; Commentary:

;; Makes the cursor stay vertically in a defined position (usually
;; centered). The vertical position can be altered, see key definition
;; below.

;; To load put that in .emacs:
;;     (require 'centered-cursor-mode)
;; To activate do:
;;     M-x centered-cursor-mode
;; for buffer local or
;;     M-x global-centered-cursor-mode
;; for global minor mode.
;; Also possible: put that in .emacs
;;     (and
;;      (require 'centered-cursor-mode)
;;      (global-centered-cursor-mode +1))
;; to always have centered-cursor-mode on in all buffers.
;;
;; FIXME:
;; use-package:
;; (use-package ...)
;;
;; Alternatives:
;; -scroll-preserve-screen-position: only works when scrolling, i.e. when point
;;     leaving window (pgup, pgdn)
;; - scroll-margin, maximum-scroll-margin: maximum is max. 0.5 and leaves 2-3 lines tolerance


;;; TODO: https://github.com/andre-r/centered-cursor-mode.el/blob/master/TODO.md

;;; Change Log:
;; 2018-01-12 andre-r
;;   * #3: Centering does not take line-height into account
;;     - added new function for calculating visible lines
;;   * #2: Bug with collapsed lines (eg. org-mode)
;;     - used count-screen-lines instead of count-lines
;; 2017-08-30 chrm
;;   * Fixed a bug with recentering at end of file
;; 2015-10-01 Hinrik Örn Sigurðsson <hinrik.sig@gmail.com>
;;   * Avoided calling count-lines when unnecessary, which
;;     fixes slow scrolling in large files
;; 2015-03-01  andre-r
;;   * fixed bug where Emacs without X support (emacs-nox) didn't find mouse-wheel-mode
;; 2009-08-31  andre-r
;;   * replaced window-body-height with window-text-height
;;     (partially visible lines are not counted in window-text-height)
;;   * bug fixed in ccm-vpos-recenter
;;     (some parentheses where wrong after the last update)
;; 2009-02-23  andre-r
;;   * some simplifications
;; 2009-02-22  andre-r
;;   * some tips from Drew Adams:
;;     - new local variable coding:utf-8
;;     - made recenter-sequence a defvar
;;     - added groups scrolling and convenience
;;     - replaced mouse-4 and mouse-5 with
;;       mouse-wheel-up-event and mouse-wheel-down-event
;;     - added scroll-bar-toolkit-scroll to ccm-ignored-commands
;;     - made ccm-ignored-commands customisable
;;   * removed a bug where it didn't work with more than one window
;;     displaying the same buffer
;;   * added function for page up and down scrolling
;;     (standard ones didn't work well with this mode)
;;   * made the animation delay customisable
;;   * made the initial vertical position customisable
;;   * made the behaviour at the end of the file customisable
;; 2008-02-02  andre-r
;;   * fixed bug that led to wrong-type-argument
;;     when opening a new buffer
;;   * some other minor stuff
;; 2007-09-24  andre-r
;;   * added global minor mode
;; 2007-09-21  andre-r
;;   * not recentering at end of buffer
;;   * defvar animate-first-start-p
;; 2007-09-14  andre-r
;;   * inital release

;; This file is *NOT* part of GNU Emacs.

;;; Code:


;; TODO: seq-do statt mapcar

(require 'mouse-wheel-mode nil 'noerror)

(defgroup centered-cursor nil
  "Makes the cursor stay vertically in a defined position (usually centered).
Instead the cursor the text moves around the cursor."
  :group 'scrolling
  :group 'convenience
  :link '(emacs-library-link :tag "Source Lisp File" "centered-cursor-mode.el")
  :link '(url-link "https://github.com/andre-r/centered-cursor-mode.el"))

(defcustom centered-cursor-lighter " ¢-DEV"
  "TODO"
  :group 'centered-cursor
  :tag "Mode line symbol"
  :type 'string)

(define-obsolete-variable-alias 'ccm-step-size 'centered-cursor-animation-step-size "0.7")
(defcustom ccm-step-size 2
  "Step size when animated recentering."
  :group 'centered-cursor
  :tag "Animation step size"
  :type 'integer)

(define-obsolete-variable-alias 'ccm-step-delay 'centered-cursor-animation-step-delay "0.7")
(defcustom ccm-step-delay 0.02
  "Delay between animation steps.
If you want a different animation speed."
  :group 'centered-cursor
  :tag "Animation step delay"
  :type 'number)

(define-obsolete-variable-alias 'ccm-ignored-commands 'centered-cursor-ignored-commands "0.7")
(defcustom ccm-ignored-commands '(mouse-drag-region
								  mouse-set-region
                                  mouse-set-point
                                  widget-button-click
                                  scroll-bar-toolkit-scroll)
  "After these commands recentering is ignored.
This is to prevent unintentional jumping (especially when mouse
clicking). Following commands (except the ignored ones) will
cause an animated recentering to give a feedback and not just
jumping to the center."
  :group 'centered-cursor
  :tag "Ignored commands"
  :type '(repeat (symbol :tag "Command")))

;; (define-obsolete-variable-alias 'ccm-vpos-init 'centered-cursor-initial-position "0.7")
(defcustom ccm-vpos-init '(round (ccm--visible-text-lines) 2)
  "This is the screen line position where the cursor initially stays."
  :group 'centered-cursor
  :tag "Vertical cursor position"
  :type '(choice (const :tag "Center" (round (ccm--visible-text-lines) 2))
                 (const :tag "Golden ratio" (round (* 21 (ccm--visible-text-lines)) 34))
                 (integer :tag "Lines from top" :value 10)))
(make-variable-buffer-local 'ccm-vpos-init)

;; (make-obsolete-variable 'ccm-vpos-inverted nil "0.7")
(defcustom ccm-vpos-inverted 1
  "Inverted vertical cursor position.
Defines if the initial vertical position `ccm-vpos-init' is
measured from the bottom instead from the top."
  :group 'centered-cursor
  :tag "Inverted cursor position"
  :type '(choice (const :tag "Inverted" -1)
                 (const :tag "Not inverted" 1)))
(make-variable-buffer-local 'ccm-vpos-inverted)

(defcustom ccm-recenter-at-end-of-file nil
  "Recenter at the end of the file.
If non-nil the end of the file is recentered. If nil the end of
the file stays at the end of the window."
  :group 'centered-cursor
  :tag "Recenter at EOF"
  :type '(choice (const :tag "Don't recenter at the end of the file" nil)
                 (const :tag "Recenter at the end of the file" t)))
(make-variable-buffer-local 'ccm-recenter-end-of-file)



;; TODO ? occurs in customization
;;;###autoload
(defun ccm-visible-text-lines ()
  ;; TODO nur neu berechnen, wenn window-configuration-change-hook?
  "Visible text lines. Partial lines at the end are not counted."
  (let ((text-pixel-height (- (window-pixel-height)
                              (window-header-line-height)
                              (window-mode-line-height))))
    (/ text-pixel-height (default-line-height))))

(defvar-local ccm-pos nil
  "This is the screen line position where the cursor stays.")

(defvar-local ccm--animate-first-start-p nil
  "Whether or not to animate at first start. It is set to nil, if
centered-cursor-mode is called non-interactively.")

(defvar-local ccm--recenter-sequence nil
  "Before animated recentering a list is generated first with positions
to successively recenter to")

(defvar ccm-keymap (make-sparse-keymap)
  "Keymap used in centered-cursor-mode.")

;;;###autoload
(defun ccm-default-bindings ()
  "TODO"
  (interactive)
  (define-key ccm-keymap (kbd "C-M--") 'ccm-set-pos-up)
  (define-key ccm-keymap (kbd "C-M-+") 'ccm-set-pos-down)
  (define-key ccm-keymap (kbd "C-M-=") 'ccm-set-pos-down)
  (define-key ccm-keymap (kbd "C-M-0") 'ccm-set-pos-centered)
  (define-key ccm-keymap (kbd "M-v") 'ccm-scroll-down)
  (define-key ccm-keymap (kbd "C-v") 'ccm-scroll-up)
  (define-key ccm-keymap (kbd "<prior>") 'ccm-scroll-down)
  (define-key ccm-keymap (kbd "<next>") 'ccm-scroll-up))

(defun ccm--default-scroll-amount ()
  (- (ccm-visible-text-lines) next-screen-context-lines))

;;;###autoload
(defun ccm-scroll-up (&optional arg)
  "Replaces `scroll-up' to be consistent with `ccm-scroll-down'.
This version actually moves the cursor with `previous-line'.
Since with centered-cursor-mode the cursor is in a fixed position
the movement appears as page down."
  (interactive "P")
  (let ((amt (or arg (ccm--default-scroll-amount))))
    ;; (next-line amt)))
    ;; (forward-line amt)))
    (line-move amt)))

;;;###autoload
(defun ccm-scroll-down (&optional arg)
  "Replaces `scroll-down' because with scroll-down
`centered-cursor-mode' sometimes doesn't reach the top of the
buffer. This version actually moves the cursor with
`previous-line'. Since with centered-cursor-mode the cursor is in
a fixed position the movement appears as page up."
  (interactive "P")
  (ccm-scroll-up (- (or arg (ccm--default-scroll-amount)))))

;;;###autoload
(defun ccm-set-pos-down (arg)
  "Adjust the value of the screen line (where the cursor stays) by ARG.
Negative values for arg are possible. Internally the variable
`ccm-pos' gets a new value."
  (interactive "p")
  (or arg (setq arg 1))
  (let ((new-pos (if (< ccm-pos 0)
                     (- ccm-pos arg)
                   (+ ccm-pos arg)))
        ;; see pos-visible-in-window-p
        (vpos-max (if (< ccm-pos 0)
                      -1
                    (- (ccm-visible-text-lines) 1)))
        (vpos-min (if (< ccm-pos 0)
                      (- (ccm-visible-text-lines))
                    0)))
    (setq ccm-pos
          (cond
           ((< new-pos vpos-min)
            vpos-min)
           ((> new-pos vpos-max)
            vpos-max)
           (t
            new-pos)))))

;;;###autoload
(defun ccm-set-pos-up (arg)
  "See `ccm-set-pos-down'."
  (interactive "p")
  (or arg (setq arg 1))
  (ccm-set-pos-down (- arg)))

;;;###autoload
(defun ccm-set-pos-centered ()
  "Set the value of the screen line (where the cursor stays) in
the center. Just the variable `ccm-pos' is set."
  (interactive)
  (when (equal (current-buffer)
               (window-buffer (selected-window)))
    (setq ccm-pos (* (eval ccm-vpos-init)
                     ccm-vpos-inverted))))

;;;###autoload
(defun ccm-position-cursor ()
  "Do the actual recentering at the position `ccm-pos'."
  (condition-case ex
	  (when (or centered-cursor-mode
				global-centered-cursor-mode)
		(if (or ; (region-active-p) ; TODO prüfen
			 (member this-command ccm-ignored-commands))
            (centered-cursor--log "%s" this-command)
		  (centered-cursor--refresh)))
	(error (prog1 nil
			 (global-centered-cursor-mode 0)
			 (message "Centered-Cursor mode disabled due to error: %s" ex)))))

(defun centered-cursor--refresh ()
  (unless ccm-pos
	(ccm-set-pos-centered))
  (when (and (not (minibufferp (current-buffer)))
			 (equal (current-buffer) (window-buffer (selected-window))))
	(let* ((recenter-arg (centered-cursor--next-recenter-function-arg ccm-pos))
		   (delta (- ccm-pos recenter-arg))
		   (lines-to-window-bottom (if (< ccm-pos 0)
						   (- ccm-pos)
						 (- (ccm-visible-text-lines) ccm-pos)))
		   (eob-in-sight-p (centered-cursor--eob-in-sight-p))
		   ;; lines from point to end of buffer
		   (lines-to-eob+1 (1+ (count-screen-lines (point) (point-max) nil)))
           (window-start-line (count-screen-lines (point-min) (window-start) t))
           (current-line (count-screen-lines (point-min) (point) t))
           )
      (centered-cursor--log-top
       "last-command-event: %s
---> mouse-event-p: %s

next-recenter-arg: %s ?
ccm-pos: %s
delta: %s ?

lines-to-window-bottom: %s
lines-to-eob + 1: %s

point-min  window-start   point  window-end  point-max
%9s %13s %7s %11s %10s

eob-in-sight-p: %27s
point-max visible in window?: %13s

window-start-line: %s
current-line:      %s

"
       last-command-event
       (mouse-event-p last-command-event)

       recenter-arg
       ccm-pos
       delta

       lines-to-window-bottom
       lines-to-eob+1
       (point-min) (window-start) (point) (window-end nil t) (point-max)

       eob-in-sight-p
       (pos-visible-in-window-p (point-max) nil t)

       window-start-line
       current-line
       )
	  ;; only animate if the point was moved rather far away
	  ;; before by a mouseclick (see ccm-ignored-commands)
	  ;; or if minor mode is just entered interactively
	  (if (and (> (abs delta) 4)
			   (or (member last-command ccm-ignored-commands)
				   ccm--animate-first-start-p))
		  (ccm--animated-recenter recenter-arg delta lines-to-window-bottom eob-in-sight-p lines-to-eob+1)
		(ccm--recenter eob-in-sight-p lines-to-eob+1 lines-to-window-bottom)))))

(defun centered-cursor--next-recenter-function-arg (pos)
  (if (< pos 0)
	  ;; one-based, from bottom, negative
	  (- (count-screen-lines
		  (point)
		  (max (window-end) (point)) t)) ; window-end is sometimes negative when opening a help buffer
	;; zero-based, from top, positive
	(1- (count-screen-lines
		 (window-start)
		 (point) t))))

(defun centered-cursor--eob-in-sight-p ()
  (or
   (= (point-max) (window-end nil t)) ; doesn't work when scrolling (eg. pgdwn)
   (= (point-max) (line-end-position ccm-pos)))) ; doesn't work on repls second to last line, because the prompt gets inserted later?

(defun ccm--recenter-at-bottom-p (eob-in-sight-p lines-to-eob+1 lines-to-window-bottom)
  (and eob-in-sight-p
       (< lines-to-eob+1 lines-to-window-bottom)
       (not ccm-recenter-at-end-of-file)))

;; eob-in-sight-p lines-to-eob+1 bottom-pos
(defun ccm--recenter (eob-in-sight-p lines-to-eob+1 lines-to-window-bottom)
  ;; if near the bottom, recenter in the negative screen line that equals the bottom
  ;; buffer line, i.e. if we are in the second last line (-2) of the buffer, the
  ;; cursor will be recentered in -2
  ;; (sit-for 2 t)
  (recenter (if (ccm--recenter-at-bottom-p eob-in-sight-p
                                           lines-to-eob+1
                                           lines-to-window-bottom)
                (- lines-to-eob+1)
              ;; (error)
              ccm-pos)))

(defun ccm--animated-recenter (recenter-arg delta lines-to-window-bottom eob-in-sight-p lines-to-eob+1)
  (setq ccm--animate-first-start-p nil)
  ;; first build a list with positions to successively recenter to
  (setq ccm--recenter-sequence
        ;; reverse: because we build the list not FROM -> TO but TO -> FROM because
        ;; if step size in number-sequence is bigger than one, TO might not be
        ;; included in the list, that means the ccm-pos would not be reached
		;; cdr: don't recenter the current-line
        (let* ((sign (/ delta (abs delta)))
               (inc (*  sign (- ccm-step-size))))
		  (if (ccm--recenter-at-bottom-p eob-in-sight-p lines-to-eob+1 lines-to-window-bottom)
              ;; this one is for animation near the bottom
              (cdr (reverse (number-sequence
							 (- lines-to-eob+1)
							 (if (< ccm-pos 0)
								 recenter-arg
                               (- (- (ccm-visible-text-lines) recenter-arg)))
							 inc)))
            (cdr (reverse (number-sequence ccm-pos recenter-arg inc))))))
  (while ccm--recenter-sequence
    ;; actual animation
    (recenter (pop ccm--recenter-sequence))
    (when ccm--recenter-sequence
	  (sit-for ccm-step-delay t))))

;;;###autoload
(defun ccm-first-start (animate)
  "Called from centered-cursor-mode. Animate at first start, if
centered-cursor-mode is called interactively."
  (let ((ccm--animate-first-start-p animate))
    (ccm-set-pos-centered)
    (ccm-position-cursor)))

(defun centered-cursor--log (string &rest objects)
  (when t
    (let ((debug-buffer
           (let ((name "*centered-cursor-log*"))
             (or (get-buffer name)
                 (generate-new-buffer name))))
          (lines (apply #'format (concat string "\n") objects)))
      (with-current-buffer debug-buffer
        (when (> (count-lines (point-min) (point-max)) 30)
          (goto-char (point-min))
          (goto-char (search-forward (concat (char-to-string ?\^L) "\n") nil t))
          (delete-region (line-beginning-position 1) (line-beginning-position 2)))
        (goto-char (point-max))
        (insert (concat (format-time-string "%F %T ") lines)))))
  nil)

(defun centered-cursor--log-top (string &rest objects)
  (when t
    (let ((debug-buffer
           (let ((name "*centered-cursor-log*"))
             (or (get-buffer name)
                 (generate-new-buffer name)))))
      (with-current-buffer debug-buffer
        (goto-char (point-min))
        (delete-region (point-min)
                       (1+ (progn
			             (search-forward (char-to-string ?\^L) nil t)
			             (point))))
        (insert (apply #'format (concat string (char-to-string ?\^L) "\n") objects)))))
  nil)

(defun centered-cursor--mode-unload-function ()
  (centered-cursor--log "centered-cursor--mode-unload-function")
  (global-centered-cursor-mode 0))

(defun centered-cursor--post-command-hook ()
  (centered-cursor--log "centered-cursor--post-command-hook")
  (ccm-position-cursor)
  )

(defun centered-cursor--window-configuration-change-hook ()
  (centered-cursor--log "centered-cursor--window-configuration-change-hook")
  (ccm-set-pos-centered))


(defun centered-cursor--add-hooks ()
  (add-hook 'post-command-hook 'centered-cursor--post-command-hook t t)
  (add-hook 'window-configuration-change-hook
            'centered-cursor--window-configuration-change-hook t t))

(defun centered-cursor--remove-hooks ()
  (remove-hook 'post-command-hook 'centered-cursor--post-command-hook t)
  (remove-hook 'window-configuration-change-hook
               'centered-cursor--window-configuration-change-hook t))

(defvar-local centered-cursor--original-mwheel-scroll-up-function 'scroll-up)

(defvar-local centered-cursor--original-mwheel-scroll-down-function 'scroll-down)

(defun centered-cursor--set-local-mwheel-scroll-functions ()
  (setq-local centered-cursor--original-mwheel-scroll-up-function
              mwheel-scroll-up-function)
  (setq-local centered-cursor--original-mwheel-scroll-down-function
              mwheel-scroll-down-function)
  (setq-local mwheel-scroll-up-function 'next-line)
  (setq-local mwheel-scroll-down-function 'previous-line))

(defun centered-cursor--reset-local-mwheel-scroll-functions ()
  (setq-local mwheel-scroll-up-function
              centered-cursor--original-mwheel-scroll-up-function)
  (setq-local mwheel-scroll-down-function
              centered-cursor--original-mwheel-scroll-down-function))

;;;###autoload
(define-minor-mode centered-cursor-mode
  "Makes the cursor stay vertically in a defined
position (usually centered)."
  :init-value nil
  :lighter centered-cursor-lighter
  :keymap ccm-keymap
  (when (not (or (minibufferp)
                 (string-match-p (rx string-start " *" (+? anything) "*" string-end)
                                 (buffer-name))))
    (cond
     (centered-cursor-mode
      (centered-cursor--log "Centered-Cursor mode enabled in buffer %s" (buffer-name))
      (ccm-first-start (interactive-p))
      (centered-cursor--add-hooks)
      (centered-cursor--set-local-mwheel-scroll-functions))
     (t
      (centered-cursor--log "Centered-Cursor mode disabled in buffer %s" (buffer-name))
      (centered-cursor--remove-hooks)
      (centered-cursor--reset-local-mwheel-scroll-functions)))))


;;;###autoload
(define-globalized-minor-mode global-centered-cursor-mode centered-cursor-mode
  centered-cursor-mode
;  :global t
  :require 'centered-cursor-mode)

(provide 'centered-cursor-mode)

;;; Help:
;; (info "(elisp)Defining Minor Modes")
;; (info "(elisp)Screen Lines")
;; (info "(elisp)Hooks")
;; (info "(elisp)Customization")
;; (find-function 'mwheel-scroll)

;; Local Variables:
;; coding: utf-8
;; End:

;;; centered-cursor-mode.el ends here
